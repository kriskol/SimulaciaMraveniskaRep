<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="textVysvetlivky.Text" xml:space="preserve">
    <value>Sú prítomné 4 typy mravcov, mravec 1.typu( modrá farba), 2.typu( hnedá faba), 3.typu 
 (tmavo čierna farba), 4.typu (limetkovo-zelená farba).

Typy políčok(stratégia mravca):
prázdna zem - políčko na ktoré je možné vstúpiť,
nie je možné sa na ňom najesť

potrava - políčko na ktoré je možné vstúpiť,
je možné sa ňom najesť

skala - políčko na ktoré nie je možné vstúpiť

priatelPrazdna - políčko, kde je prázdna zem a sú tam
i mravce toho istého typu, vzhľadom ku ktorému uvažujeme
dané políčko

priatelPotrava - políčko, kde je potrava a sú tam i mravce toho
istého typu, vzhľadom ku ktorému uvažujeme políčko

nepriatelPrazdna - políčko, kde je prázdna zem a na ňom sú 
mravce iného typu, ak ten vzhľadom ku ktorému  uvažujeme 
políčko

nepriatelPotrava - políčko, kde je potrava a sú tam i mravce
iného typu, ako ten vzhľadom ku ktorému uvažujeme 
políčko

Akcie mravcov:
zostaň stáť - mravce zostane stáť na políčku, pokiaľ by došlo k
boju na jeho políčku, tak má výhodu

otoč sa vľavo - mravec sa na políčku otočí vľavo

choď dopredu obranne - mravec ide dopredu o jedno políčko, pokiaľ sa stretne s
mravcami iného typu v opačnom smere, tak sa vráti na políčko z ktorého vychádzal
zníži sa mu pritom jeho energia

choď dopredu útočne - mravec ide dopredu o jedno políčko, pokiaľ sa stretne s
mravcami iného typu v opačnom smere, tak bojuje s mravcami, ak vyhrá a 
nemá maximálnu energiu, tak sa jeho energia zvýši

najedz sa - mravec sa pokúsi získať energiu z potravy, pokiaľ je na políčku potrava

rozmnožuj sa - mravec sa pokúsi rozmnožovať s mravcami toho istého typu na 
políčku na ktorom sa nachádza. Predpoklad úspešného rozmnožovania mravca
je ten, že na políčku je aspoň jeden mravec toho istého typu, ktorý sa chce rozmnožovať
a všetci majú dostatok energie. Taktiež sa nemôžu v danom kroku účastniť boja.
Pri párení dôjde k znížení ich energie, pričom pokiaľ sa pári n mravcov, tak vznikne n/2 
mravcov, zaokrúhlené nadol. Energia novovzniknutých mravcov je získaná z energie, ktorú
stratia mravce, ktorý sa rozmnožovali. Táto energie je medzi nich čo možno najrovnomernejšie
rozložená.

U mravca je najdôležitejší atribút jeho energia. Pokiaľ ju má nulovú, tak zanikne. Taktiež od
jeho energie závysia jeho šance na výhru v súboji.

Stratégie mravcov typu 1 a 2, sú nastavené. 

Stratégie mravcov ostatných typov nastavené niesu. 
Pokiaľ ich chcete používať, tak musíte nastaviť ich stratégie v časti Nastavenia Mravcov.

V časti nastavenie mravcov nastavujeme stratégiu mravca pomocou tabuľky 4x7.
4 riadky reprezentuju pol´íčka na ktorom uvažovaný mravec stoji, a to: prázdna zem, potrava,
priatelPrazdna a priatelPotrava.
7 stlpcov reprezentuje políčka, ktoré sú pred uvažovaným mravcom a to sú:
prázdna zem, skala, potrava, priatelPrazdna, priatelPotrava, nepriatelPrazdna, nepriatelPotrava.

V časti simulácia je možné nastavenie rýchlosti behu simulácie (čím väčšie číslo, tým je simulácia
pomalšia) a miesto kam sa uloží textový výstup.

Policka v casti vystup su zobrazovane, takymi farbami ako v casti Nastavenia Mravcov, pokiaľ
nich nie su mravce. Pokial su tak sa jedno policko zobrazuje pomocou 2
obdlznikov, kde 1.obdlznik (zlava) ma farbu typu policka tak ako v casti Nastavenia Mravcov
druhy ma farbu typu mravcov, ktory na nom su.</value>
  </data>
  <metadata name="saveFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="backgroundWorker1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>179, 17</value>
  </metadata>
</root>